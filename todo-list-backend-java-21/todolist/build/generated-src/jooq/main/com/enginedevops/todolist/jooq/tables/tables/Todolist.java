/*
 * This file is generated by jOOQ.
 */
package com.enginedevops.todolist.jooq.tables.tables;


import com.enginedevops.todolist.jooq.tables.Keys;
import com.enginedevops.todolist.jooq.tables.Public;
import com.enginedevops.todolist.jooq.tables.tables.records.TodolistRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Todolist extends TableImpl<TodolistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.todolist</code>
     */
    public static final Todolist TODOLIST = new Todolist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodolistRecord> getRecordType() {
        return TodolistRecord.class;
    }

    /**
     * The column <code>public.todolist.id</code>.
     */
    public final TableField<TodolistRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.todolist.title</code>.
     */
    public final TableField<TodolistRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.todolist.completed</code>.
     */
    public final TableField<TodolistRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.todolist.status</code>.
     */
    public final TableField<TodolistRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("'DRAFT'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Todolist(Name alias, Table<TodolistRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Todolist(Name alias, Table<TodolistRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.todolist</code> table reference
     */
    public Todolist(String alias) {
        this(DSL.name(alias), TODOLIST);
    }

    /**
     * Create an aliased <code>public.todolist</code> table reference
     */
    public Todolist(Name alias) {
        this(alias, TODOLIST);
    }

    /**
     * Create a <code>public.todolist</code> table reference
     */
    public Todolist() {
        this(DSL.name("todolist"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TodolistRecord, Integer> getIdentity() {
        return (Identity<TodolistRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TodolistRecord> getPrimaryKey() {
        return Keys.TODOLIST_PKEY;
    }

    @Override
    public Todolist as(String alias) {
        return new Todolist(DSL.name(alias), this);
    }

    @Override
    public Todolist as(Name alias) {
        return new Todolist(alias, this);
    }

    @Override
    public Todolist as(Table<?> alias) {
        return new Todolist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(String name) {
        return new Todolist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(Name name) {
        return new Todolist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(Table<?> name) {
        return new Todolist(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist where(Condition condition) {
        return new Todolist(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todolist where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todolist where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todolist where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todolist where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todolist whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
